class Solution {
public:
    void dfs(vector<vector<char>>&board,int i,int j){
        if(i<0||j<0||i>=board.size()||j>=board[0].size())
            return;
        if(board[i][j]=='B'||board[i][j]=='X'||(board[i][j]<='9'&&board[i][j]>='1'))
            return;
        if(board[i][j]=='M'){
            board[i][j]='X';
            return;
        }
        if(board[i][j]=='E'){
            int sum=0;
            for(int x=-1;x<=1;x++){
                for(int y=-1;y<=1;y++){
                    if((x==0&&y==0)||(i+x<0)||(j+y<0)||(i+x>=board.size())||(j+y>=board[0].size()))
                        continue;
                    if(board[i+x][j+y]=='M')
                        sum++;              
                }
            }      
	
	    if(sum>0){
	    board[i][j]='0'+sum;
	    return;
        }
	    board[i][j]='B';
            
        for(int x=-1;x<=1;x++){
            for(int y=-1;y<=1;y++){
                if((x==0&&y==0)||(i+x<0)||(j+y<0)||(i+x>=board.size())||(j+y>=board[0].size()))
                    continue;
	            if(board[i+x][j+y]=='E')
                    dfs(board,i+x,j+y);
                }
            }      
	    return;
    }
    }
    
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        if(board.size()==0||board[0].size()==0||click.size()==0)
            return board;
        dfs(board,click[0],click[1]);
        return board;
    }
};

